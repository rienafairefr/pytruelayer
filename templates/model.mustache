# coding: utf-8

{{>partial_header}}

import pprint
import re  # noqa: F401

import six

import marshmallow
from marshmallow import Schema, validates, ValidationError, post_load, missing

import {{packageName}}
import {{packageName}}.fields
from {{packageName}}.configuration import Configuration


{{#models}}
{{#model}}
"""
{{{.}}}
"""


class {{classname}}Schema(Schema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
{{#vars}}
    {{name}} = {{>schema_partial_type}}
{{/vars}}
{{#vars}}
    @validates("{{name}}")
    def validates_{{name}}(self, {{name}}):
{{^isNullable}}
{{#required}}
        if {{name}} is None:  # noqa: E501
            raise ValidationError("Invalid value for `{{name}}`, must not be `None`")  # noqa: E501
{{/required}}
{{/isNullable}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
{{#isListContainer}}
        if not set({{{name}}}).issubset(set(allowed_values))):  # noqa: E501
            raise ValidationError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values))):  # noqa: E501
            raise ValidationError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#isNullable}}None,{{/isNullable}}{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
        if {{{name}}} not in allowed_values:  # noqa: E501
            raise ValidationError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"  # noqa: E501
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
{{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise ValidationError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
{{/maxLength}}
{{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise ValidationError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
{{/minLength}}
{{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ValidationError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
{{/maximum}}
{{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ValidationError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
{{/minimum}}
{{#pattern}}
        if {{name}} is not None and not re.search(r'{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):  # noqa: E501
            raise ValidationError(r"Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")  # noqa: E501
{{/pattern}}
{{#maxItems}}
        if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise ValidationError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
{{/maxItems}}
{{#minItems}}
        if {{name}} is not None and len({{name}}) < {{minItems}}):
            raise ValidationError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}
        pass

{{/vars}}
    @post_load
    def post_load(self, data, **kwargs):
        config = Configuration()
        config.client_side_validation = False
        return {{classname}}(local_vars_configuration=config, **data)


class {{classname}}(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}

{{#allowableValues}}
    allowable_values = [{{#enumVars}}{{name}}{{^-last}}, {{/-last}}{{/enumVars}}]  # noqa: E501

{{/allowableValues}}
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
{{#vars}}
        '{{name}}': '{{{dataType}}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }

    attribute_map = {
{{#vars}}
        '{{name}}': '{{baseName}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }
{{#discriminator}}

    discriminator_value_class_map = {
        {{#children}}'{{^vendorExtensions.x-discriminator-value}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},
        {{/-last}}{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}missing{{/defaultValue}}{{/vars}}, local_vars_configuration=None):  # noqa: E501
        """{{classname}} - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.discriminator = {{#discriminator}}'{{{discriminatorName}}}'{{/discriminator}}{{^discriminator}}None{{/discriminator}}
        if self.local_vars_configuration.client_side_validation:
            validated = {{classname}}Schema().load({
{{#vars}}
                '{{name}}': {{name}}{{^-last}},{{/-last}}
{{/vars}}
            })
{{#vars}}
            self.{{name}} = validated.{{name}}
{{/vars}}
        else:
{{#vars}}
            self.{{name}} = {{name}}
{{/vars}}

{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

{{/discriminator}}
    def to_dict(self):
        """Returns the model properties as a dict"""
        return {{classname}}Schema().dump(self)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, {{classname}}):
            return True

        return self.to_dict() != other.to_dict()
{{/model}}
{{/models}}
